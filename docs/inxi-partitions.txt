================================================================================
INXI PARTITITIONS
================================================================================
FILE:    inxi-partitions.txt
VERSION: 1.0
DATE:    2022-10-26

----------------------------------------
Docs:
See: 

----------------------------------------
Code:
See:

----------------------------------------
Comments:

================================================================================

Sections:
1. FILE SYSTEMS
  USER SPACE FILE SYSTEMS
    Fuse Based File Systems
    Stackable file systems
  READ-ONLY FILE SYSTEMS
  CLUSTERED FILE SYSTEMS
  SHARED-DISK FILE SYSTEM
  WINDOWS LINUX FILE SYSTEM
    
================================================================================
FILE SYSTEMS
--------------------------------------------------------------------------------

Issues arise with disk used totals with remote/distributed fs mounts and fuse.

========================================
USER SPACE FILE SYSTEMS
----------------------------------------

https://www.linuxtoday.com/blog/user-space-file-systems/

There are many examples of file systems that use FUSE. Sometimes FUSE is used
for prototyping or testing file systems or it is used as the file system itself.
It is beyond the scope of this article to list all of them or even a good chunk
of them, but some that you might recognize (or might not) include:

SSHFS This is a file system client that can mount and interact with directories
and files on a remote system using sftp. Very handy file system for mounting
remote file systems.

GmailFS This FUSE based file system was written to use Google’s email storage as
a file system. Originally it used the gmail web interface but this kept
changing. The previous link takes you to a new version of GmailFS that uses IMAP
to use the gmail email space as a file system. One of the interesting aspects of
this file system is that it’s written in Python.

EncFS This FUSE based file system provides an encrypted file system for Linux.
For a discussion about encrypted file systems and Linux please read this.

NTFS-3G NTFS-3G gives you read/write access to a Windows NTFS file system.
According to the website it works with Windows XP, Windows Server 2003, Windows
2000, Windows Vista, Windows Server 2008 and Windows 7 NTFS file systems.

archivemount This file system allows you to mount archive files such as tar
(.tar) or gzipped tar files (.tar.gz) to a mount point and interact with them
including reading and writing. It’s a very cool way to check out the contents of
a .tar.gz file before uncompressing and untarring it, especially if you only
need one file from it. It also allows you to easily manipulate and create
.tar.gz files.

ZFS-Fuse This file system allows you to create, mount, use, and manage ZFS file
systems under Linux. Recall that the licensing of ZFS is not compatible with GPL
so interfacing ZFS with FUSE keeps ZFS as a user-space application which runs on
Linux and doesn’t violate any licensing. So if you want ZFS on Linux, this is
your best option.

CloudStore CloudStore (kosmosfs/kfs) is a distributed file system that is
integrated with Hadoop and Hypertable. MountableHDFS There are several projects
that allow you to mount a Hadoop file system (HDFS) and interact with it as you
would a normal POSIX-style file system. For example, you can do an “ls” or a
“cp” or a “mv” on HDFS using these FUSE based projects. This also means you can
use POSIX conforming applications to read/write to HDFS without having to use
the API.

GlusterFS This is a high performance, distributed file system that uses a
concept of “translators” that allow you to create file systems with various
capabilities including mirroring and replication, striping, load-balancing, disk
caching, read-ahead, write-behind, and self-healing. One of the strengths of
GlusterFS is that it doesn’t use metadata but rather relies on the knowledge of
the file layout and the underlying file system.

MooseFS MooseFS is a distributed fault-tolerant file system with several unique
features: when you delete files MooseFS retains them for a period of time so
they can be recovered; it also can create coherent snapshots of files even while
the file is being accessed or written.

s3fs This FUSE file system allows you to take a S3 bucket and mount it as a
local file system. There is commercial support for this type of service from
Subcloud.

As you can see there are a fair number of very usable FUSE based file systems
ranging from something as seemingly simple as mounting .tar.gz files as a file
system giving you the ability to read and write to them without having to
uncompress and untar them, to encrypted file systems, to high performance
distributed parallel file systems.

----------------------------------------
Fuse Based File Systems
----------------------------------------

see section on FUSE-based file systems
https://wiki.archlinux.org/title/file_systems

----------------------------------------
Stackable file systems
----------------------------------------

aufs — Advanced Multi-layered Unification Filesystem, a FUSE based union
filesystem, a complete rewrite of Unionfs, was rejected from Linux mainline and
instead OverlayFS was merged into the Linux Kernel.

http://aufs.sourceforge.net || linux-aufsAUR

eCryptfs — The Enterprise Cryptographic Filesystem is a package of disk
encryption software for Linux. It is implemented as a POSIX-compliant
filesystem-level encryption layer, aiming to offer functionality similar to that
of GnuPG at the operating system level.

https://ecryptfs.org || ecryptfs-utils

mergerfs — a FUSE based union filesystem.

https://github.com/trapexit/mergerfs || mergerfsAUR

mhddfs — Multi-HDD FUSE filesystem, a FUSE based union filesystem.

http://mhddfs.uvw.ru || mhddfsAUR

overlayfs — OverlayFS is a filesystem service for Linux which implements a union
mount for other file systems.

https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html || linux

Unionfs — Unionfs is a filesystem service for Linux, FreeBSD and NetBSD which
implements a union mount for other file systems.

https://unionfs.filesystems.org/ || not packaged? search in AUR

unionfs-fuse — A user space Unionfs implementation.

https://github.com/rpodgorny/unionfs-fuse || unionfs-fuse

========================================
READ-ONLY FILE SYSTEMS
----------------------------------------

EROFS — Enhanced Read-Only File System is a lightweight read-only file system,
it aims to improve performance and compress storage capacity.

https://www.kernel.org/doc/html/latest/filesystems/erofs.html || erofs-utils

SquashFS — SquashFS is a compressed read only filesystem. SquashFS compresses
files, inodes and directories, and supports block sizes up to 1 MB for greater
compression.

https://github.com/plougher/squashfs-tools || squashfs-tools

========================================
CLUSTERED FILE SYSTEMS
----------------------------------------

Ceph — Unified, distributed storage system designed for excellent performance,
reliability and scalability.

https://ceph.com/ || ceph

Glusterfs — Cluster file system capable of scaling to several peta-bytes.

https://www.gluster.org/ || glusterfs

IPFS — A peer-to-peer hypermedia protocol to make the web faster, safer, and
more open. IPFS aims replace HTTP and build a better web for all of us. Uses
blocks to store parts of a file, each network node stores only content it is
interested, provides deduplication, distribution, scalable system limited only
by users. (currently in alpha)

https://ipfs.io/ || go-ipfs

MooseFS — MooseFS is a fault tolerant, highly available and high performance
scale-out network distributed file system.

https://moosefs.com || moosefs

OpenAFS — Open source implementation of the AFS distributed file system

https://www.openafs.org || openafsAUR

OrangeFS — OrangeFS is a scale-out network file system designed for
transparently accessing multi-server-based disk storage, in parallel. Has
optimized MPI-IO support for parallel and distributed applications. Simplifies
the use of parallel storage not only for Linux clients, but also for Windows,
Hadoop, and WebDAV. POSIX-compatible. Part of Linux kernel since version 4.6.

https://www.orangefs.org/ || not packaged? search in AUR

Sheepdog — Distributed object storage system for volume and container services
and manages the disks and nodes intelligently.

https://sheepdog.github.io/sheepdog/ || sheepdogAUR

Tahoe-LAFS — Tahoe Least-Authority Filesystem is a free and open, secure,
decentralized, fault-tolerant, peer-to-peer distributed data store and
distributed file system.

https://tahoe-lafs.org/ || tahoe-lafsAUR

========================================
SHARED-DISK FILE SYSTEM
----------------------------------------

GFS2 — GFS2 allows all members of a cluster to have direct concurrent access to
the same shared block storage

https://pagure.io/gfs2-utils || gfs2-utilsAUR

OCFS2 — The Oracle Cluster File System (version 2) is a shared disk file system
developed by Oracle Corporation and released under the GNU General Public
License

https://oss.oracle.com/projects/ocfs2/ || ocfs2-toolsAUR

VMware VMFS — VMware's VMFS (Virtual Machine File System) is used by the
company's flagship server virtualization suite, vSphere.

https://www.vmware.com/products/vi/esx/vmfs.html || vmfs-toolsAUR

========================================
WINDOWS LINUX FILE SYSTEM
----------------------------------------
9c - drvfs:

https://superuser.com/questions/1107618/where-is-the-c-drive-in-the-wsl

The WSL has access to your PC’s file system through /mnt/<drive letter>/ 
directories (or mount points). For example, your C:\ and D:\ root directories in 
Windows would be available through /mnt/c/ and /mnt/d/ respectively in the WSL

========================================

----------------------------------------
