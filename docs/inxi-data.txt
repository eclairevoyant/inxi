================================================================================
INXI INTERNAL DATA
================================================================================
FILE: inxi-data.txt
VERSION: 2.5
DATE: 2022-07-04

----------------------------------------
Docs:
See: docs/inxi-bsd.txt
See: docs/inxi-cpu.txt
See: docs/inxi-cpu-flags.txt
See: docs/inxi-desktop-wm.txt
See: docs/inxi-graphic.txt
See: docs/inxi-init.txt
See: docs/inxi-resources.txt
See: docs/inxi-sensors.txt
See: docs/inxi-values.txt
See: docs/optimization.txt

----------------------------------------
Code:
See:

----------------------------------------
Comments:

Store of internal data that is used for various features that are spread around 
inside of inxi. This helps dev work and gives a single location for distributed 
data.

As sections grow, and repeat/match inxi-resources.txt sections, they will be 
moved to sub files, for that specific topic, since the inxi-data.txt and 
inxi-resources.txt files tend to overlap significantly, and it gets harder to 
find stuff in them.

================================================================================

Sections:
1. CORE DATA
  BLUETOOTH DATA - See inxi-bsd.txt
  CPU DATA - See inxi-cpu.txt :: CPU DATA; inxi-cpu-flags.txt
  DESKTOP / WM DATA - See inxi-desktop-wm.txt :: DESKTOP / WM DATA
  DEVICE DATA
   PCI/PCIe DATA
   Open/NetBSD ARM / SOC
   FreeBSD ARM / SOC
  DISTRO DATA
   DistroData::get()
  GRAPHIC DATA - See inxi-graphic.txt, includes monitors 
  INIT DATA - See inxi-init.txt
  LOGICAL DATA
  PARTITION DATA
   FILE SYSTEMS
    USER SPACE FILE SYSTEMS
    Fuse Based File Systems
    Stackable file systems
    Read-only file systems
    Clustered file systems
    Shared-disk file system
  RAID DATA
   OpenBSD: softraid data
  RAM DATA
   BSD: dmesg data for RAM / NVMe
    OpenBSD:
     nvme:
    NetBSD:
    FreeBSD:
  SENSORS DATA - See inxi-sensors.txt
  SERVICE DATA - See inxi-init.txt
  TTY DATA
   What is the TTY major number of your Unix?
   What is the difference between ttys0, ttyUSB0 and ttyAMA0 in Linux?
    ttyS0
    ttyUSB0
    ttyAMA0
    ttySAC0
2. SECONDARY DATA
  LIVE CD LOGINS
  DISTRO DATA
   Packages
3. DATA ANALYSIS
  FIND FILE IN *.tar.gz
  get rid of arrays/hashes passed whole instead of by reference to subs
4. BSD DATA - See inxi-bsd.txt :: BSD DATA :: BSD TOOLS / UTILITIES

================================================================================
CORE DATA
================================================================================

================================================================================
DEVICE DATA
--------------------------------------------------------------------------------

========================================
PCI/PCIe DATA
----------------------------------------

https://forums.tomshardware.com/threads/understanding-dmidecode-pci-e-slot-%E2%80%9Ctype%E2%80%9D-values-e-g-%E2%80%9Cx8-pci-express-3-x16%E2%80%9D.2588792/

Some PCIe slots are physically x16 and have x16 lanes.
Some PCIe slots are physically x16 and have x8 lanes. This is likely what that command result is describing.
Some PCIe slots are physically x16 and have x4 lanes.

Typically, the top PCIe x16 slot has x16 lanes, and is specifically used for GPUs.

https://en.wikipedia.org/wiki/PCI-X


PCI-X, short for Peripheral Component Interconnect eXtended, is a computer bus and expansion card standard that enhances the 32-bit PCI local bus for higher bandwidth demanded mostly by servers and workstations. It uses a modified protocol to support higher clock speeds (up to 133 MHz), but is otherwise similar in electrical implementation. PCI-X 2.0 added speeds up to 533 MHz,[2]: 23  with a reduction in electrical signal levels.

The slot is physically a 3.3 V PCI slot, with exactly the same size, location and pin assignments. The electrical specifications are compatible, but stricter. However, while most conventional PCI slots are the 85 mm long 32-bit version, most PCI-X devices use the 130 mm long 64-bit slot, to the point that 64-bit PCI connectors and PCI-X support are seen as synonymous.

PCI-X is in fact fully specified for both 32- and 64-bit PCI connectors,[3]: 14  and PCI-X 2.0 added a 16-bit variant for embedded applications.[2]: 22 

It has been replaced in modern designs by the similar-sounding PCI Express (officially abbreviated as PCIe),[4] with a completely different physical connector and a very different electrical design, having one or more narrow but fast serial connection lanes instead of a number of slower connections in parallel. 

http://www.techpository.com/linux-using-dmidecode-to-read-computer-bios-information/

Handle 0x000E, DMI type 9, 13 bytes.
System Slot Information
	Designation: PCIX#1-133MHz
	Type: 64-bit PCI-X
	Current Usage: Available
	Length: Long
	ID: 1
	Characteristics:
		3.3 V is provided
Handle 0x000F, DMI type 9, 13 bytes.
System Slot Information
	Designation: PCIX#2-100MHz
	Type: 64-bit PCI-X
	Current Usage: Available
	Length: Long
	ID: 2
	Characteristics:
		3.3 V is provided
Handle 0x0010, DMI type 9, 13 bytes.
System Slot Information
	Designation: PCIE#3-x8
	Type: Other
	Current Usage: Available
	Length: Other
	Characteristics:
		3.3 V is provided
Handle 0x0011, DMI type 9, 13 bytes.
System Slot Information
	Designation: PCIE#4-x8
	Type: Other
	Current Usage: Available
	Length: Other
	Characteristics:
		3.3 V is provided
Handle 0x0012, DMI type 9, 13 bytes.
System Slot Information
	Designation: PCIE#5-x8
	Type: Other
	Current Usage: Available
	Length: Other
	Characteristics:
		3.3 V is provided
---------------------------------------

https://www.linuxsecrets.com/entry/6managing-linux-systems/2015/10/01/1658-how-to-identify-a-pci-slot-to-physical-socket-in-a-multi-processor-system-with-linux?showall=1

ls -la /sys/bus/pci/devices

lrwxrwxrwx 1 root root 0 Mar 11 08:51 0000:0a:00.0 -> ../../../devices/pci0000:00/0000:00:03.1/0000:0a:00.0

We can break down the device by the following information

 

        0000 : PCI domain (each domain can contain up to 256 PCI buses)
        04   : the bus number the device is attached to
        00   : the device number
        .0   : PCI device function

To get additional information about the device, we can change into the 0000:04:00.0 directory and execute output to display one or more pseudo-device entries:

# cd 0000:04:00.0


Next type:

# ls -la

total 0
drwxr-xr-x 4 root root 0 2009-08-03 10:38 .
drwxr-xr-x 7 root root 0 2009-08-03 10:38 ..
-rw-r--r-- 1 root root 4096 2009-08-03 12:23 broken_parity_status
-r--r--r-- 1 root root 4096 2009-08-03 10:38 class
-rw-r--r-- 1 root root 4096 2009-08-03 11:34 config
-r--r--r-- 1 root root 4096 2009-08-03 10:38 device
lrwxrwxrwx 1 root root 0 2009-08-03 10:38 driver -> ../../../../bus/pci/drivers/tg3
-rw------- 1 root root 4096 2009-08-03 12:23 enable
lrwxrwxrwx 1 root root 0 2009-08-03 12:12 firmware_node -> ../../../LNXSYSTM:00/device:00/PNP0A03:00/device:1a/device:1b
-r--r--r-- 1 root root 4096 2009-08-03 10:38 irq
-r--r--r-- 1 root root 4096 2009-08-03 12:23 local_cpulist
-r--r--r-- 1 root root 4096 2009-08-03 10:38 local_cpus
-r--r--r-- 1 root root 4096 2009-08-03 12:23 modalias
-rw-r--r-- 1 root root 4096 2009-08-03 12:23 msi_bus
drwxr-xr-x 3 root root 0 2009-08-03 10:38 net
-r--r--r-- 1 root root 4096 2009-08-03 12:23 numa_node
drwxr-xr-x 2 root root 0 2009-08-03 12:12 power
-r--r--r-- 1 root root 4096 2009-08-03 11:34 resource
-rw------- 1 root root 65536 2009-08-03 12:23 resource0
lrwxrwxrwx 1 root root 0 2009-08-03 10:38 subsystem -> ../../../../bus/pci
-r--r--r-- 1 root root 4096 2009-08-03 10:38 subsystem_device
-r--r--r-- 1 root root 4096 2009-08-03 10:38 subsystem_vendor
-rw-r--r-- 1 root root 4096 2009-08-03 10:38 uevent
-r--r--r-- 1 root root 4096 2009-08-03 10:38 vendor
-rw------- 1 root root 32768 2009-08-03 12:23 vpd


https://tldp.org/LDP/tlk/dd/pci.html
very good overview of pci bus branching/parent/child structures

very good overview of mobo, cpu, pcie, lanes, etc
https://www.cgdirector.com/guide-to-pcie-lanes/

----------------------------------------

https://lwn.net/Articles/116311/

A PCI Express Port is a logical PCI-PCI Bridge structure. There
are two types of PCI Express Port: the Root Port and the Switch
Port. A PCI Express Port can provide up to four distinct services,
depending on its port type. These services include native hotplug
support, power management event support, advanced error reporting
support, and virtual channel support.

In existing Linux kernels, the Linux Device Driver Model allows a
physical device to be handled by only a single driver. The PCI
Express Port is a PCI-PCI Bridge device with multiple distinct
services. To maintain a clean and simple solution each service
may have its own software service driver. In this case several
service drivers will compete for a single PCI-PCI Bridge device.
For example, if the PCI Express Root Port native hotplug service
driver is loaded first, it claims a PCI-PCI Bridge Root Port. The
kernel therefore does not load other service drivers for that Root
Port. In other words, it is impossible to have multiple service
drivers loaded and run on a PCI-PCI Bridge device simultaneously
using the current driver model.

To enable multiple service drivers running simultaneously requires
having a PCI Express Port Bus driver, which manages all populated
PCI Express Ports and distributes all provided service requests
to the corresponding service drivers as required.

https://www.kernel.org/doc/html/latest/PCI/pciebus-howto.html

2.2. What is the PCI Express Port Bus Driver

A PCI Express Port is a logical PCI-PCI Bridge structure. There are two types of 
PCI Express Port: the Root Port and the Switch Port. The Root Port originates a 
PCI Express link from a PCI Express Root Complex and the Switch Port connects 
PCI Express links to internal logical PCI buses. The Switch Port, which has its 
secondary bus representing the switch’s internal routing logic, is called the 
switch’s Upstream Port. The switch’s Downstream Port is bridging from switch’s 
internal routing bus to a bus representing the downstream PCI Express link from 
the PCI Express Switch.

A PCI Express Port can provide up to four distinct functions, referred to in 
this document as services, depending on its port type. PCI Express Port’s 
services include native hotplug support (HP), power management event support 
(PME), advanced error reporting support (AER), and virtual channel support (VC). 
These services may be handled by a single complex driver or be individually 
distributed and handled by corresponding service drivers.
----------------------------------------
https://www.linuxsecrets.com/entry/6managing-linux-systems/2015/10/01/1658-how-to-identify-a-pci-slot-to-physical-socket-in-a-multi-processor-system-with-linux?showall=1   

In the first set of output, lspci reads through the sysfs entries and decodes 
the vendor and device numbers using the vendor and device information in 
/usr/share/hwdata/pci.ids (to be 100% accurate, lspci uses libpci, which returns 
the data using the PCI identification data in /usr/share/hwdata/pci.ids). In the 
second set of output, lspci displayed the raw PCI identification data.

========================================
Open/NetBSD ARM / SOC
----------------------------------------

https://man.bsd.lv/NetBSD-8.0/ofctl.8
ofctl without arguments will dump theh entire tree, which is what we need here!

========================================
FreeBSD ARM / SOC
----------------------------------------

To get dmi-like data on arm with FDT (all RPi atm) one should use ofwdump and
/dev/openfirm. It has access to DTB, so it is +- the way kernel see hardware.

Note: ofdump sucks,you have to use -a to get all the device nodes, which are
seriously incomplete, then you have to drill in one at a time with -p and
collect the node information on at a time, useless.

It's odd that BSD 'unix' which prides itself on 'everything is a file' has no
everything is a file' data structures like Linux does, /proc, /sys. More
than a bit odd to be honest, there's just a bunch of odd little not that great
tools to get this data, some super inconsistent and hard to parse sysctl and
dmesg.boot data, when it could easily be put into a single kernel
live dynamic data structure, call it /kern for example to avoid the appearance
of copying Linux /proc and /sys, but man.... learn to copy good ideas!!!

https://wiki.freebsd.org/FlattenedDeviceTree
----------------------------------------
# devinfo
nexus0
  ofwbus0
    psci0
    simplebus0
      bcm2835_clkman0
      mbox0
      gpio0
        gpiobus0
        gpioc0
      uart0
      spi0
        spibus0
      iichb0
        iicbus0
          iic0
      bcm283x_dwcotg0
        usbus1
          uhub0
            uhub1
              uhub2
                muge0
                  miibus0
                    ukphy0
      bcm_dma0
      intc0
      bcmwd0
      bcmrng0
      lintc0
      sdhci_bcm0
        mmc0
          mmcsd0
      bcm2835_firmware0
        ofw_clkbus1
        gpio1
          gpiobus1
          gpioc1
      fb0
        fbd0
    ofw_clkbus0
      clk_fixed0
      clk_fixed1
    usb_nop_xceiv0
    pmu0
    generic_timer0
    cpulist0
      cpu0
        bcm2835_cpufreq0
        cpufreq0
      cpu1
      cpu2
      cpu3
    gpioled0
    regfix0
    regfix1
  cryptosoft0
  
----------------------------------------
# ofwdump -a
Node 0xc06309a0:
  Node 0xc0630a04: aliases
  Node 0xc0630b04: cpus
    Node 0xc0630b30: PowerPC,8555@0
  Node 0xc0630bec: memory
  Node 0xc0630c24: soc8555@e0000000
    Node 0xc0630cac: ecm-law@0
    Node 0xc0630cfc: ecm@1000
    Node 0xc0630d6c: memory-controller@2000
    Node 0xc0630dec: l2-cache-controller@20000
    Node 0xc0630ea4: i2c@3000
    Node 0xc0630f40: dma@21300
      Node 0xc0630fd8: dma-channel@0
      Node 0xc0631074: dma-channel@80
      Node 0xc0631110: dma-channel@100
      Node 0xc06311ac: dma-channel@180
    Node 0xc063124c: ethernet@24000
      Node 0xc0631360: mdio@520
        Node 0xc06313c4: ethernet-phy@0
        Node 0xc063143c: ethernet-phy@1
        Node 0xc06314b4: tbi-phy@11
    Node 0xc0631504: ethernet@25000
      Node 0xc0631618: mdio@520
        Node 0xc0631678: tbi-phy@11
    Node 0xc06316c8: serial@4500
    Node 0xc063175c: serial@4600
    Node 0xc06317f0: crypto@30000
    Node 0xc0631898: pic@40000
    Node 0xc0631930: cpm@919c0
      Node 0xc06319a8: muram@80000
        Node 0xc06319f0: data@0
      Node 0xc0631a40: brg@919f0
      Node 0xc0631aa8: pic@90c00
  Node 0xc0631b58: pci@e0008000
    Node 0xc0631fa8: i8259@19000
  Node 0xc0632068: pci@e0009000
  
----------------------------------------
# ofwdump -ar
Node 0x48:
  Node 0x118: framebuffer@3eaf0000
  Node 0x1c8: psci
  Node 0x204: system
  Node 0x238: axi
    Node 0x240: vc_mem
  Node 0x26c: aliases
  Node 0x708: chosen
    Node 0x890: bootloader
  Node 0x8a8: reserved-memory
    Node 0x8f8: linux,cma
  Node 0x964: thermal-zones
    Node 0x978: cpu-thermal
      Node 0x9dc: cooling-maps
  Node 0x9fc: soc
    Node 0xa88: txp@7e004000
    Node 0xb10: cprman@7e101000
    Node 0xbcc: mailbox@7e00b880
    Node 0xc50: gpio@7e200000
      Node 0xd10: mmc_pins
      Node 0xd8c: dpi_gpio0
      Node 0xe3c: emmc_gpio22
      Node 0xe94: emmc_gpio34
      Node 0xf10: emmc_gpio48
      Node 0xf68: gpclk0_gpio4
      Node 0xfb0: gpclk1_gpio5
      Node 0xff8: gpclk1_gpio42
      Node 0x1040: gpclk1_gpio44
      Node 0x1088: gpclk2_gpio6
      Node 0x10d0: gpclk2_gpio43
      Node 0x1128: i2c0_gpio0
      Node 0x1170: i2c0_gpio28
      Node 0x11b8: i2c0_gpio44
      Node 0x1200: i2c1_gpio2
      Node 0x1248: i2c1_gpio44
      Node 0x1290: jtag_gpio22
      Node 0x12e8: pcm_gpio18
      Node 0x1338: pcm_gpio28
      Node 0x1388: sdhost_gpio48
      Node 0x13e4: spi0_gpio7
      Node 0x1438: spi0_gpio35
      Node 0x148c: spi1_gpio16
      Node 0x14e4: spi2_gpio40
      Node 0x153c: uart0_gpio14
      Node 0x1588: uart0_ctsrts_gpio16
      Node 0x15d8: uart0_ctsrts_gpio30
      Node 0x163c: uart0_gpio32
      Node 0x169c: uart0_gpio36
      Node 0x16e8: uart0_ctsrts_gpio38
      Node 0x1738: uart1_gpio14
      Node 0x1784: uart1_ctsrts_gpio16
      Node 0x17d4: uart1_gpio32
      Node 0x1820: uart1_ctsrts_gpio30
      Node 0x1870: uart1_gpio40
      Node 0x18bc: uart1_ctsrts_gpio42
      Node 0x190c: i2c_slave_gpio18
      Node 0x1964: jtag_gpio4
      Node 0x19b8: pwm0_gpio12
      Node 0x19fc: pwm0_gpio18
      Node 0x1a40: pwm0_gpio40
      Node 0x1a84: pwm1_gpio13
      Node 0x1ac8: pwm1_gpio19
      Node 0x1b0c: pwm1_gpio41
      Node 0x1b50: pwm1_gpio45
      Node 0x1b94: dpi_18bit_gpio0
      Node 0x1c30: dpi_18bit_gpio2
      Node 0x1cc4: gpioout
      Node 0x1d04: alt0
      Node 0x1d5c: spi0_pins
      Node 0x1da8: spi0_cs_pins
      Node 0x1df4: i2c0
      Node 0x1e38: i2c1
      Node 0x1e7c: i2s
      Node 0x1ec4: sdio_pins
      Node 0x1f40: bt_pins
      Node 0x1f84: uart0_pins
      Node 0x1fcc: uart1_pins
      Node 0x2014: audio_pins
    Node 0x2060: serial@7e201000
      Node 0x216c: bluetooth
    Node 0x21f4: mmc@7e202000
    Node 0x230c: i2s@7e203000
    Node 0x23f8: spi@7e204000
      Node 0x2528: spidev@0
      Node 0x25a0: spidev@1
    Node 0x261c: i2c@7e205000
    Node 0x26e8: i2c0mux
      Node 0x27a8: i2c@0
      Node 0x27f8: i2c@1
    Node 0x284c: dpi@7e208000
    Node 0x2914: dsi@7e209000
    Node 0x2a50: aux@7e215000
    Node 0x2ad0: serial@7e215040
      Node 0x2b9c: bluetooth
    Node 0x2c24: spi@7e215080
    Node 0x2ce4: spi@7e2150c0
    Node 0x2da4: pwm@7e20c000
    Node 0x2e60: hvs@7e400000
    Node 0x2ee8: dsi@7e700000
    Node 0x3024: i2c@7e804000
    Node 0x3110: vec@7e806000
    Node 0x31c0: usb@7e980000
      Node 0x32d0: usb-port@1
        Node 0x3328: usb-port@1
          Node 0x3380: ethernet@1
            Node 0x33dc: mdio
              Node 0x3408: ethernet-phy@1
    Node 0x3494: dma@7e007000
    Node 0x3608: interrupt-controller@7e00b200
    Node 0x36b8: watchdog@7e100000
    Node 0x37ac: rng@7e104000
    Node 0x381c: pixelvalve@7e206000
    Node 0x38b0: pixelvalve@7e207000
    Node 0x3944: thermal@7e212000
    Node 0x39e0: i2c@7e805000
    Node 0x3aac: pixelvalve@7e807000
    Node 0x3b40: hdmi@7e902000
    Node 0x3c88: v3d@7ec00000
    Node 0x3d20: gpu
    Node 0x3d74: local_intc@40000000
    Node 0x3e04: mmc@7e300000
    Node 0x3f18: mmcnr@7e300000
    Node 0x403c: firmwarekms@7e600000
    Node 0x40e8: smi@7e600000
    Node 0x41d0: csi@7e800000
    Node 0x42d4: csi@7e801000
    Node 0x43e8: axiperf
    Node 0x4470: firmware
      Node 0x4500: clocks
      Node 0x4558: expgpio
    Node 0x45d4: power
    Node 0x463c: mailbox@7e00b840
      Node 0x46c0: bcm2835_audio
    Node 0x4754: gpiomem
    Node 0x479c: fb
    Node 0x47f8: vcsm
    Node 0x4864: sound
  Node 0x48a0: clocks
    Node 0x48ac: clk-osc
    Node 0x4914: clk-usb
  Node 0x4980: phy
  Node 0x49c8: arm-pmu
  Node 0x4a30: timer
  Node 0x4aa4: cpus
    Node 0x4b00: cpu@0
    Node 0x4b98: cpu@1
    Node 0x4c30: cpu@2
    Node 0x4cc8: cpu@3
  Node 0x4d64: __overrides__
  Node 0x530c: leds
    Node 0x5340: act
    Node 0x53b0: pwr
  Node 0x5414: fixedregulator_3v3
  Node 0x5498: fixedregulator_5v0
  Node 0x551c: memory@0
  Node 0x5558: cam1_reg
  Node 0x55ec: __symbols__
root@freebsd2:~ # ls -l /dev/openfirm
root@freebsd2:~ # ofwdump -ar
Node 0x48:
  Node 0x118: framebuffer@3eaf0000
  Node 0x1c8: psci
  Node 0x204: system
  Node 0x238: axi
    Node 0x240: vc_mem
  Node 0x26c: aliases
  Node 0x708: chosen
    Node 0x890: bootloader
  Node 0x8a8: reserved-memory
    Node 0x8f8: linux,cma
  Node 0x964: thermal-zones
    Node 0x978: cpu-thermal
      Node 0x9dc: cooling-maps
  Node 0x9fc: soc
    Node 0xa88: txp@7e004000
    Node 0xb10: cprman@7e101000
    Node 0xbcc: mailbox@7e00b880
    Node 0xc50: gpio@7e200000
      Node 0xd10: mmc_pins
      Node 0xd8c: dpi_gpio0
      Node 0xe3c: emmc_gpio22
      Node 0xe94: emmc_gpio34
      Node 0xf10: emmc_gpio48
      Node 0xf68: gpclk0_gpio4
      Node 0xfb0: gpclk1_gpio5
      Node 0xff8: gpclk1_gpio42
      Node 0x1040: gpclk1_gpio44
      Node 0x1088: gpclk2_gpio6
      Node 0x10d0: gpclk2_gpio43
      Node 0x1128: i2c0_gpio0
      Node 0x1170: i2c0_gpio28
      Node 0x11b8: i2c0_gpio44
      Node 0x1200: i2c1_gpio2
      Node 0x1248: i2c1_gpio44
      Node 0x1290: jtag_gpio22
      Node 0x12e8: pcm_gpio18
      Node 0x1338: pcm_gpio28
      Node 0x1388: sdhost_gpio48
      Node 0x13e4: spi0_gpio7
      Node 0x1438: spi0_gpio35
      Node 0x148c: spi1_gpio16
      Node 0x14e4: spi2_gpio40
      Node 0x153c: uart0_gpio14
      Node 0x1588: uart0_ctsrts_gpio16
      Node 0x15d8: uart0_ctsrts_gpio30
      Node 0x163c: uart0_gpio32
      Node 0x169c: uart0_gpio36
      Node 0x16e8: uart0_ctsrts_gpio38
      Node 0x1738: uart1_gpio14
      Node 0x1784: uart1_ctsrts_gpio16
      Node 0x17d4: uart1_gpio32
      Node 0x1820: uart1_ctsrts_gpio30
      Node 0x1870: uart1_gpio40
      Node 0x18bc: uart1_ctsrts_gpio42
      Node 0x190c: i2c_slave_gpio18
      Node 0x1964: jtag_gpio4
      Node 0x19b8: pwm0_gpio12
      Node 0x19fc: pwm0_gpio18
      Node 0x1a40: pwm0_gpio40
      Node 0x1a84: pwm1_gpio13
      Node 0x1ac8: pwm1_gpio19
      Node 0x1b0c: pwm1_gpio41
      Node 0x1b50: pwm1_gpio45
      Node 0x1b94: dpi_18bit_gpio0
      Node 0x1c30: dpi_18bit_gpio2
      Node 0x1cc4: gpioout
      Node 0x1d04: alt0
      Node 0x1d5c: spi0_pins
      Node 0x1da8: spi0_cs_pins
      Node 0x1df4: i2c0
      Node 0x1e38: i2c1
      Node 0x1e7c: i2s
      Node 0x1ec4: sdio_pins
      Node 0x1f40: bt_pins
      Node 0x1f84: uart0_pins
      Node 0x1fcc: uart1_pins
      Node 0x2014: audio_pins
    Node 0x2060: serial@7e201000
      Node 0x216c: bluetooth
    Node 0x21f4: mmc@7e202000
    Node 0x230c: i2s@7e203000
    Node 0x23f8: spi@7e204000
      Node 0x2528: spidev@0
      Node 0x25a0: spidev@1
    Node 0x261c: i2c@7e205000
    Node 0x26e8: i2c0mux
      Node 0x27a8: i2c@0
      Node 0x27f8: i2c@1
    Node 0x284c: dpi@7e208000
    Node 0x2914: dsi@7e209000
    Node 0x2a50: aux@7e215000
    Node 0x2ad0: serial@7e215040
      Node 0x2b9c: bluetooth
    Node 0x2c24: spi@7e215080
    Node 0x2ce4: spi@7e2150c0
    Node 0x2da4: pwm@7e20c000
    Node 0x2e60: hvs@7e400000
    Node 0x2ee8: dsi@7e700000
    Node 0x3024: i2c@7e804000
    Node 0x3110: vec@7e806000
    Node 0x31c0: usb@7e980000
      Node 0x32d0: usb-port@1
        Node 0x3328: usb-port@1
          Node 0x3380: ethernet@1
            Node 0x33dc: mdio
              Node 0x3408: ethernet-phy@1
    Node 0x3494: dma@7e007000
    Node 0x3608: interrupt-controller@7e00b200
    Node 0x36b8: watchdog@7e100000
    Node 0x37ac: rng@7e104000
    Node 0x381c: pixelvalve@7e206000
    Node 0x38b0: pixelvalve@7e207000
    Node 0x3944: thermal@7e212000
    Node 0x39e0: i2c@7e805000
    Node 0x3aac: pixelvalve@7e807000
    Node 0x3b40: hdmi@7e902000
    Node 0x3c88: v3d@7ec00000
    Node 0x3d20: gpu
    Node 0x3d74: local_intc@40000000
    Node 0x3e04: mmc@7e300000
    Node 0x3f18: mmcnr@7e300000
    Node 0x403c: firmwarekms@7e600000
    Node 0x40e8: smi@7e600000
    Node 0x41d0: csi@7e800000
    Node 0x42d4: csi@7e801000
    Node 0x43e8: axiperf
    Node 0x4470: firmware
      Node 0x4500: clocks
      Node 0x4558: expgpio
    Node 0x45d4: power
    Node 0x463c: mailbox@7e00b840
      Node 0x46c0: bcm2835_audio
    Node 0x4754: gpiomem
    Node 0x479c: fb
    Node 0x47f8: vcsm
    Node 0x4864: sound
  Node 0x48a0: clocks
    Node 0x48ac: clk-osc
    Node 0x4914: clk-usb
  Node 0x4980: phy
  Node 0x49c8: arm-pmu
  Node 0x4a30: timer
  Node 0x4aa4: cpus
    Node 0x4b00: cpu@0
    Node 0x4b98: cpu@1
    Node 0x4c30: cpu@2
    Node 0x4cc8: cpu@3
  Node 0x4d64: __overrides__
  Node 0x530c: leds
    Node 0x5340: act
    Node 0x53b0: pwr
  Node 0x5414: fixedregulator_3v3
  Node 0x5498: fixedregulator_5v0
  Node 0x551c: memory@0
  Node 0x5558: cam1_reg
  Node 0x55ec: __symbols__
  
----------------------------------------
# ofwdump -p /soc8555/ethernet@24000
Node 0xc063124c: ethernet@24000
  #address-cells:
    00 00 00 01 
  #size-cells:
    00 00 00 01 
  cell-index:
    00 00 00 00 
  device_type:
    6e 65 74 77 6f 72 6b 00 
    'network'
  model:
    54 53 45 43 00 
    'TSEC'
  compatible:
    67 69 61 6e 66 61 72 00 
    'gianfar'
  reg:
    00 02 40 00 00 00 10 00 
  ranges:
    00 00 00 00 00 02 40 00 00 00 10 00 
  local-mac-address:
    00 00 00 00 00 00 
  interrupts:
    00 00 00 1d 00 00 00 02 00 00 00 1e 00 00 00 02 00 00 00 22 
    00 00 00 02 
  interrupt-parent:
    00 00 00 02 
  tbi-handle:
    00 00 00 03 
  phy-handle:
    00 00 00 04 

================================================================================
DISTRO DATA
--------------------------------------------------------------------------------

========================================
DistroData::get()
----------------------------------------

NOTE: live cd TAILS which is a Debian based security live cd uses non
standard syntax in /etc/os-release

Since it is a  live cd, the distro id could include this, but if I start
adding these types of single unique case tiny user base logics, the distro 
id section will mushroom out of control.

So this was removed, but this is one way of detecting tails and then
correcting the os-release field name syntax.

The proper course here is to file an issue report against tails and have
them correct the os-release syntax, not to correct it for them.

# why did tails feel it necessary to use non standard field names? who knows.
	if (-e '/etc/dpkg/origins/Tails'){
		@content = map {
		$_ =~ s/^TAILS_PRODUCT_NAME=/NAME=/;
		$_ =~ s/^TAILS_VERSION_ID=/VERSION_ID=/;
		$_;
		} @content;
	}

For coming UBUNTU version:
ubuntu-distro-info --devel --fullname

================================================================================
LOGICAL DATA
--------------------------------------------------------------------------------

lvm_data()

these were for pvs:

@args = qw(vg_name vg_fmt vg_size vg_free vg_sysid lv_count
lv_name lv_size lv_health_status lv_parent pv_count
pv_count pv_name dev_size pv_size pv_free pv_used pv_major pv_minor
seg_size devices metadata_devices segtype stripes);

================================================================================
PARTITION DATA
--------------------------------------------------------------------------------

Issues arise with disk used totals with remote/distributed fs mounts and fuse.

========================================
FILE SYSTEMS
----------------------------------------

----------------------------------------
USER SPACE FILE SYSTEMS
----------------------------------------

https://www.linuxtoday.com/blog/user-space-file-systems/

There are many examples of file systems that use FUSE. Sometimes FUSE is used
for prototyping or testing file systems or it is used as the file system itself.
It is beyond the scope of this article to list all of them or even a good chunk
of them, but some that you might recognize (or might not) include:

SSHFS This is a file system client that can mount and interact with directories
and files on a remote system using sftp. Very handy file system for mounting
remote file systems.

GmailFS This FUSE based file system was written to use Google’s email storage as
a file system. Originally it used the gmail web interface but this kept
changing. The previous link takes you to a new version of GmailFS that uses IMAP
to use the gmail email space as a file system. One of the interesting aspects of
this file system is that it’s written in Python.

EncFS This FUSE based file system provides an encrypted file system for Linux.
For a discussion about encrypted file systems and Linux please read this.

NTFS-3G NTFS-3G gives you read/write access to a Windows NTFS file system.
According to the website it works with Windows XP, Windows Server 2003, Windows
2000, Windows Vista, Windows Server 2008 and Windows 7 NTFS file systems.

archivemount This file system allows you to mount archive files such as tar
(.tar) or gzipped tar files (.tar.gz) to a mount point and interact with them
including reading and writing. It’s a very cool way to check out the contents of
a .tar.gz file before uncompressing and untarring it, especially if you only
need one file from it. It also allows you to easily manipulate and create
.tar.gz files.

ZFS-Fuse This file system allows you to create, mount, use, and manage ZFS file
systems under Linux. Recall that the licensing of ZFS is not compatible with GPL
so interfacing ZFS with FUSE keeps ZFS as a user-space application which runs on
Linux and doesn’t violate any licensing. So if you want ZFS on Linux, this is
your best option.

CloudStore CloudStore (kosmosfs/kfs) is a distributed file system that is
integrated with Hadoop and Hypertable. MountableHDFS There are several projects
that allow you to mount a Hadoop file system (HDFS) and interact with it as you
would a normal POSIX-style file system. For example, you can do an “ls” or a
“cp” or a “mv” on HDFS using these FUSE based projects. This also means you can
use POSIX conforming applications to read/write to HDFS without having to use
the API.

GlusterFS This is a high performance, distributed file system that uses a
concept of “translators” that allow you to create file systems with various
capabilities including mirroring and replication, striping, load-balancing, disk
caching, read-ahead, write-behind, and self-healing. One of the strengths of
GlusterFS is that it doesn’t use metadata but rather relies on the knowledge of
the file layout and the underlying file system.

MooseFS MooseFS is a distributed fault-tolerant file system with several unique
features: when you delete files MooseFS retains them for a period of time so
they can be recovered; it also can create coherent snapshots of files even while
the file is being accessed or written.

s3fs This FUSE file system allows you to take a S3 bucket and mount it as a
local file system. There is commercial support for this type of service from
Subcloud.

As you can see there are a fair number of very usable FUSE based file systems
ranging from something as seemingly simple as mounting .tar.gz files as a file
system giving you the ability to read and write to them without having to
uncompress and untar them, to encrypted file systems, to high performance
distributed parallel file systems.

----------------------------------------
Fuse Based File Systems
----------------------------------------

see sectoin on FUSE-based file systems
https://wiki.archlinux.org/title/file_systems

----------------------------------------
Stackable file systems
----------------------------------------

aufs — Advanced Multi-layered Unification Filesystem, a FUSE based union
filesystem, a complete rewrite of Unionfs, was rejected from Linux mainline and
instead OverlayFS was merged into the Linux Kernel.

http://aufs.sourceforge.net || linux-aufsAUR

eCryptfs — The Enterprise Cryptographic Filesystem is a package of disk
encryption software for Linux. It is implemented as a POSIX-compliant
filesystem-level encryption layer, aiming to offer functionality similar to that
of GnuPG at the operating system level.

https://ecryptfs.org || ecryptfs-utils

mergerfs — a FUSE based union filesystem.

https://github.com/trapexit/mergerfs || mergerfsAUR

mhddfs — Multi-HDD FUSE filesystem, a FUSE based union filesystem.

http://mhddfs.uvw.ru || mhddfsAUR

overlayfs — OverlayFS is a filesystem service for Linux which implements a union
mount for other file systems.

https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html || linux

Unionfs — Unionfs is a filesystem service for Linux, FreeBSD and NetBSD which
implements a union mount for other file systems.

https://unionfs.filesystems.org/ || not packaged? search in AUR

unionfs-fuse — A user space Unionfs implementation.

https://github.com/rpodgorny/unionfs-fuse || unionfs-fuse

----------------------------------------
Read-only file systems
----------------------------------------

EROFS — Enhanced Read-Only File System is a lightweight read-only file system,
it aims to improve performance and compress storage capacity.

https://www.kernel.org/doc/html/latest/filesystems/erofs.html || erofs-utils

SquashFS — SquashFS is a compressed read only filesystem. SquashFS compresses
files, inodes and directories, and supports block sizes up to 1 MB for greater
compression.

https://github.com/plougher/squashfs-tools || squashfs-tools

----------------------------------------
Clustered file systems
----------------------------------------

Ceph — Unified, distributed storage system designed for excellent performance,
reliability and scalability.

https://ceph.com/ || ceph

Glusterfs — Cluster file system capable of scaling to several peta-bytes.

https://www.gluster.org/ || glusterfs

IPFS — A peer-to-peer hypermedia protocol to make the web faster, safer, and
more open. IPFS aims replace HTTP and build a better web for all of us. Uses
blocks to store parts of a file, each network node stores only content it is
interested, provides deduplication, distribution, scalable system limited only
by users. (currently in alpha)

https://ipfs.io/ || go-ipfs

MooseFS — MooseFS is a fault tolerant, highly available and high performance
scale-out network distributed file system.

https://moosefs.com || moosefs

OpenAFS — Open source implementation of the AFS distributed file system

https://www.openafs.org || openafsAUR

OrangeFS — OrangeFS is a scale-out network file system designed for
transparently accessing multi-server-based disk storage, in parallel. Has
optimized MPI-IO support for parallel and distributed applications. Simplifies
the use of parallel storage not only for Linux clients, but also for Windows,
Hadoop, and WebDAV. POSIX-compatible. Part of Linux kernel since version 4.6.

https://www.orangefs.org/ || not packaged? search in AUR

Sheepdog — Distributed object storage system for volume and container services
and manages the disks and nodes intelligently.

https://sheepdog.github.io/sheepdog/ || sheepdogAUR

Tahoe-LAFS — Tahoe Least-Authority Filesystem is a free and open, secure,
decentralized, fault-tolerant, peer-to-peer distributed data store and
distributed file system.

https://tahoe-lafs.org/ || tahoe-lafsAUR

----------------------------------------
Shared-disk file system
----------------------------------------

GFS2 — GFS2 allows all members of a cluster to have direct concurrent access to
the same shared block storage

https://pagure.io/gfs2-utils || gfs2-utilsAUR

OCFS2 — The Oracle Cluster File System (version 2) is a shared disk file system
developed by Oracle Corporation and released under the GNU General Public
License

https://oss.oracle.com/projects/ocfs2/ || ocfs2-toolsAUR

VMware VMFS — VMware's VMFS (Virtual Machine File System) is used by the
company's flagship server virtualization suite, vSphere.

https://www.vmware.com/products/vi/esx/vmfs.html || vmfs-toolsAUR

================================================================================
RAID DATA
--------------------------------------------------------------------------------

========================================
OpenBSD: softraid data
----------------------------------------

https://man.openbsd.org/softraid.4

Currently softraid supports the following disciplines:

RAID 0
    A striping discipline. It segments data over a number of chunks to increase performance. RAID 0 does not provide for data loss (redundancy).
RAID 1
    A mirroring discipline. It copies data across more than one chunk to provide for data loss. Read performance is increased, though at the cost of write speed. Unlike traditional RAID 1, softraid supports the use of more than two chunks in a RAID 1 setup.
RAID 5
    A striping discipline with floating parity across all chunks. It stripes data across chunks and provides parity to prevent data loss of a single chunk failure. Read performance is increased; write performance does incur additional overhead.
CRYPTO
    An encrypting discipline. It encrypts data on a single chunk to provide for data confidentiality. CRYPTO does not provide redundancy.
CONCAT
    A concatenating discipline. It writes data to each chunk in sequence to provide increased capacity. CONCAT does not provide redundancy.
RAID 1C
    A mirroring and encrypting discipline. It encrypts data to provide for data confidentiality and copies the encrypted data across more than one chunk to prevent data loss in case of a chunk failure. Unlike traditional RAID 1, softraid supports the use of more than two chunks in a RAID 1C setup. 

    
The status of softraid volumes is reported via sysctl(8) such that it can be monitored by sensorsd(8). Each volume has one fourth level node named hw.sensors.softraid0.driveN, where N is a small integer indexing the volume. The format of the volume status is:

value (device), status

The device identifies the softraid volume. The following combinations of value and status can occur:

online, OK
    The volume is operating normally.
degraded, WARNING
    The volume as a whole is operational, but not all of its chunks are. In many cases, using bioctl(8) -R to rebuild the failed chunk is advisable.
rebuilding, WARNING
    A rebuild operation was recently started and has not yet completed.
failed, CRITICAL
    The device is currently unable to process I/O.
unknown, UNKNOWN
    The status is unknown to the system.
	
https://marc.info/?l=openbsd-misc&m=145607956104915&w=2
$ doas bioctl softraid0
Volume Status               Size Device
softraid0 0 Rebuild    12002360033280 sd6     RAID5 35% done
        0 Rebuild     4000786726912 0:0.0   noencl <sd2a>
        1 Online      4000786726912 0:1.0   noencl <sd3a>
        2 Online      4000786726912 0:2.0   noencl <sd4a>
        3 Online      4000786726912 0:3.0   noencl <sd5a>
        
$ doas bioctl softraid0
 Volume      Status               Size Device
 softraid0 0 Degraded    12002360033280 sd6     RAID5
           0 Offline     4000786726912 0:0.0
           1 Online      4000786726912 0:1.0   noencl <sd3a>
           2 Online      4000786726912 0:2.0   noencl <sd4a>
           3 Online      4000786726912 0:3.0   noencl <sd5a>

http://daemonforums.org/showthread.php?t=4893
$ sudo bioctl softraid0
Volume Status Size Device
softraid0 0 Rebuild 1073684480 sd2 RAID1 70% done
0 Online 1073684480 0:0.0 noencl <sd0a>
1 Rebuild 1073684480 0:1.0 noencl <sd1a>

$ sudo bioctl softraid0
Volume Status Size Device
softraid0 0 Rebuild 1073684480 sd2 RAID1 70% done
0 Online 1073684480 0:0.0 noencl <sd0a>
1 Rebuild 1073684480 0:1.0 noencl <sd1a>

$ sudo bioctl softraid0
Volume Status Size Device
softraid0 0 Rebuild 1073684480 sd2 RAID1 97% done
0 Online 1073684480 0:0.0 noencl <sd0a>
1 Rebuild 1073684480 0:1.0 noencl <sd1a>

$ sudo bioctl softraid0
Volume Status Size Device
softraid0 0 Online 1073684480 sd2 RAID1
0 Online 1073684480 0:0.0 noencl <sd0a>
1 Online 1073684480 0:1.0 noencl <sd1a>

http://daemonforums.org/showthread.php?t=8869
# bioctl softraid0
Volume Status               Size Device 
softraid0 0 Online       938117554176 sd2     RAID1
          0 Online       938117554176 0:0.0   noencl <sd0m>
          1 Online       938117554176 0:1.0   noencl <sd1m>
          
@data = (
Volume Status               Size Device
softraid0 0 Degraded    12002360033280 sd6     RAID5
0 Offline     4000786726912 0:0.0
1 Online      4000786726912 0:1.0   noencl <sd3a>
2 Online      4000786726912 0:2.0   noencl <sd4a>
3 Online      4000786726912 0:3.0   noencl <sd5a>'
);

@data = (
Volume Status               Size Device
softraid0 0 Rebuild    12002360033280 sd6     RAID5 35% done
0 Rebuild     4000786726912 0:0.0   noencl <sd2a>
1 Online      4000786726912 0:1.0   noencl <sd3a>
2 Online      4000786726912 0:2.0   noencl <sd4a>
3 Online      4000786726912 0:3.0   noencl <sd5a>
);

================================================================================
RAM DATA
--------------------------------------------------------------------------------

========================================
BSD: dmesg data for RAM / NVMe
----------------------------------------

----------------------------------------
OpenBSD:
----------------------------------------

----------------------------------------
ram:

spdmem0 at iic0 addr 0x52: 16GB DDR4 SDRAM PC4-17000 with thermal sensor
spdmem1 at iic0 addr 0x53: 16GB DDR4 SDRAM PC4-17000 with thermal sensor

spdmem0 at iic0 addr 0x50: 8GB DDR3 SDRAM PC3-14200 SO-DIMM

piixpm0 at pci0 dev 20 function 0 "AMD FCH SMBus" rev 0x51: SMI
iic1 at piixpm0
spdmem0 at iic1 addr 0x50: 32GB DDR4 SDRAM PC4-25600 SO-DIMM

spdmem0 at iic1 addr 0x50: 32GB DDR4 SDRAM PC4-25600 SO-DIMM

spdmem0 at iic0 addr 0x50: 4GB DDR3 SDRAM PC3-12800 SO-DIMM
spdmem1 at iic0 addr 0x52: 4GB DDR3 SDRAM PC3-12800 SO-DIMM

spdmem0 at iic1 addr 0x50: 16GB DDR4 SDRAM PC4-25600 SO-DIMM

spdmem0 at iic0 addr 0x50: 2GB DDR3 SDRAM PC3-10600
spdmem1 at iic0 addr 0x52: 2GB DDR3 SDRAM PC3-10600
spdmem2 at iic0 addr 0x53: 4GB DDR3 SDRAM PC3-12800

spdmem0 at iic0 addr 0x50: 2GB DDR2 SDRAM non-parity PC2-5300CL5 SO-DIMM
spdmem1 at iic0 addr 0x52: 1GB DDR2 SDRAM non-parity PC2-5300CL5 SO-DIMM

iic0 at ichiic0
spdmem0 at iic0 addr 0x50: 8GB DDR3 SDRAM PC3-12800 SO-DIMM
spdmem1 at iic0 addr 0x51: 4GB DDR3 SDRAM PC3-12800 SO-DIMM
isa0 at pcib0

spdmem0 at iic0 addr 0x50: 2GB DDR3 SDRAM PC3-8500 SO-DIMM

spdmem0 at iic0 addr 0x50: 16GB DDR4 SDRAM PC4-17000
spdmem1 at iic0 addr 0x51: 16GB DDR4 SDRAM PC4-17000
spdmem2 at iic0 addr 0x52: 16GB DDR4 SDRAM PC4-17000
spdmem3 at iic0 addr 0x53: 16GB DDR4 SDRAM PC4-17000

spdmem0 at iic0 addr 0x50: 16GB DDR4 SDRAM PC4-19200 SO-DIMM

sdtemp0 at iic0 addr 0x18: stts2002
sdtemp1 at iic0 addr 0x19: stts2002
sdtemp2 at iic0 addr 0x1a: stts2002
sdtemp3 at iic0 addr 0x1b: stts2002
spdmem0 at iic0 addr 0x50: 4GB DDR3 SDRAM ECC PC3-10600 with thermal sensor
spdmem1 at iic0 addr 0x51: 4GB DDR3 SDRAM ECC PC3-10600 with thermal sensor
spdmem2 at iic0 addr 0x52: 4GB DDR3 SDRAM ECC PC3-10600 with thermal sensor
spdmem3 at iic0 addr 0x53: 4GB DDR3 SDRAM ECC PC3-10600 with thermal sensor

mem0 at mainbus0
spdmem0 at mem0: 1GB DDR SDRAM non-parity PC3200CL3.0
spdmem1 at mem0: 1GB DDR SDRAM non-parity PC3200CL3.0
spdmem2 at mem0: 256MB DDR SDRAM non-parity PC3200CL2.5
spdmem3 at mem0: 256MB DDR SDRAM non-parity PC3200CL2.5
memc0 at mainbus0: u3 rev 0xb3

sdtemp0 at iic0 addr 0x18: mcp98242
spdmem0 at iic0 addr 0x50: 1GB DDR3 SDRAM PC3-8500 SO-DIMM with thermal sensor
spdmem1 at iic0 addr 0x52: 2GB DDR3 SDRAM PC3-10600 SO-DIMM

sd0 at scsibus1 targ 0 lun 0: <ATA, WDC WD1003FBYX-0, 01.0> naa.50014ee20946ec61
sd0: 953869MB, 512 bytes/sector, 1953525168 sectors
ichiic0 at pci0 dev 31 function 3 "Intel 6 Series SMBus" rev 0x04: apic 0 int 19
iic0 at ichiic0
sdtemp0 at iic0 addr 0x18: stts2002
sdtemp1 at iic0 addr 0x19: stts2002
sdtemp2 at iic0 addr 0x1a: stts2002
sdtemp3 at iic0 addr 0x1b: stts2002
spdmem0 at iic0 addr 0x50: 4GB DDR3 SDRAM ECC PC3-10600 with thermal sensor
spdmem1 at iic0 addr 0x51: 4GB DDR3 SDRAM ECC PC3-10600 with thermal sensor
spdmem2 at iic0 addr 0x52: 4GB DDR3 SDRAM ECC PC3-10600 with thermal sensor
spdmem3 at iic0 addr 0x53: 4GB DDR3 SDRAM ECC PC3-10600 with thermal sensor

mem0 at mainbus0
spdmem0 at mem0: 1GB DDR SDRAM non-parity PC3200CL3.0
spdmem1 at mem0: 1GB DDR SDRAM non-parity PC3200CL3.0
spdmem2 at mem0: 256MB DDR SDRAM non-parity PC3200CL2.5
spdmem3 at mem0: 256MB DDR SDRAM non-parity PC3200CL2.5
memc0 at mainbus0: u3 rev 0xb3

spdmem0 at iic0 addr 0x50: 4GB DDR3 SDRAM PC3-12800 SO-DIMM

spdmem0 at iic0 addr 0x50: 8GB DDR4 SDRAM PC4-25600 SO-DIMM

spdmem0 at iic0 addr 0x50: 8GB DDR4 SDRAM PC4-25600 SO-DIMM

spdmem0 at iic0 addr 0x50: 2GB DDR3 SDRAM PC3-10600 SO-DIMM
spdmem1 at iic0 addr 0x52: 2GB DDR3 SDRAM PC3-10600 SO-DIMM

spdmem0 at iic0 addr 0x52: 16GB DDR4 SDRAM PC4-19200
spdmem1 at iic0 addr 0x53: 16GB DDR4 SDRAM PC4-19200

spdmem0 at iic0 addr 0x52: 4GB DDR4 SDRAM PC4-19200 SO-DIMM

spdmem0 at iic0 addr 0x50: 4GB DDR3 SDRAM PC3-12800 SO-DIMM
spdmem1 at iic0 addr 0x52: 2GB DDR3 SDRAM PC3-12800 SO-DIMM

spdmem0 at iic0 addr 0x50: 2GB DDR2 SDRAM non-parity PC2-6400CL6 SO-DIMM
spdmem1 at iic0 addr 0x52: 2GB DDR2 SDRAM non-parity PC2-6400CL6 SO-DIMM

spdmem0 at iic0 addr 0x50: 1GB DDR2 SDRAM non-parity PC2-5300CL5 SO-DIMM
spdmem1 at iic0 addr 0x52: 2GB DDR2 SDRAM non-parity PC2-5300CL5 SO-DIMM

sdtemp0 at iic0 addr 0x18: mcp98243
sdtemp1 at iic0 addr 0x19: mcp98243
sdtemp2 at iic0 addr 0x1a: mcp98243
sdtemp3 at iic0 addr 0x1b: mcp98243
spdmem0 at iic0 addr 0x50: 8GB DDR3 SDRAM ECC PC3-12800 with thermal sensor
spdmem1 at iic0 addr 0x51: 8GB DDR3 SDRAM ECC PC3-12800 with thermal sensor
spdmem2 at iic0 addr 0x52: 8GB DDR3 SDRAM ECC PC3-12800 with thermal sensor
spdmem3 at iic0 addr 0x53: 8GB DDR3 SDRAM ECC PC3-12800 with thermal sensor

spdmem0 at iic0 addr 0x50: 2GB DDR2 SDRAM non-parity PC2-5300CL5 SO-DIMM
spdmem1 at iic0 addr 0x51: 2GB DDR2 SDRAM non-parity PC2-5300CL5 SO-DIMM

spdmem0 at iic0 addr 0x50: 2GB DDR2 SDRAM non-parity PC2-6400CL6 SO-DIMM

spdmem0 at iic0 addr 0x50: 4GB DDR4 SDRAM PC4-19200 SO-DIMM
spdmem1 at iic0 addr 0x52: 4GB DDR4 SDRAM PC4-19200 SO-DIMM


spdmem0 at iic0 addr 0x50: 8GB DDR3 SDRAM PC3-10600 SO-DIMM
spdmem1 at iic0 addr 0x51: 8GB DDR3 SDRAM PC3-10600 SO-DIMM

------------------------------------------
nvme:

nvme0 at pci1 dev 0 function 0 vendor "Intel", unknown product 0xfaf0 rev 0x03: msix, NVMe 1.3
nvme0: INTEL SSDPEKNW010T9, firmware 001C, serial BTNR004318SM1P0B
scsibus1 at nvme0: 2 targets, initiator 0
sd0 at scsibus1 targ 1 lun 0: <NVMe, INTEL SSDPEKNW01, 001C>
sd0: 976762MB, 512 bytes/sector, 2000409264 sectors

nvme0 at pci1 dev 0 function 0 "Samsung SM981/PM981 NVMe" rev 0x00: msix, NVMe 1.3
nvme0: Samsung SSD 970 EVO Plus 2TB, firmware 2B2QEXM7, serial serialserialserial
scsibus1 at nvme0: 2 targets, initiator 0
sd0 at scsibus1 targ 1 lun 0: <NVMe, Samsung SSD 970, 2B2Q>
sd0: 1907729MB, 512 bytes/sector, 3907029168 sectors

----------------------------------------
NetBSD:
----------------------------------------

[ 1.011873] spdmem0: DDR4 SDRAM (DDR4 UDIMM), ECC, temp-sensor, 16GB, 3200MHz (PC4-25600)
[ 1.011873] spdmem1: DDR4 SDRAM (DDR4 UDIMM), ECC, temp-sensor, 16GB, 3200MHz (PC4-25600)

Mac mini (G4/PowerPC):
[ 1.000000] memory0 at mainbus0: len=128
[ 1.000000] spdmem0 at memory0
[ 1.000000] spdmem0: DDR SDRAM, no parity or ECC, 1GB, 400MHz (PC-3200)
[ 1.000000] spdmem0: 13 rows, 11 cols, 2 ranks, 4 banks/chip, 5.0ns cycle time
[ 1.000000] spdmem0: tAA-tRCD-tRP-tRAS: 2-3-3-8
[ 1.000000] spdmem0: voltage SSTL 2.5V, refresh time 7.8us (self-refreshing)

[ 1.037567] spdmem0 at iic0 addr 0x50: 9965745-002.A00G
[ 1.037567] spdmem0: DDR4 SDRAM (DDR4 UDIMM), ECC, temp-sensor, 16GB, 2667MHz (PC4-21300)
[ 1.037567] spdmem0: 16 rows, 10 cols, 2 ranks (symmetric), 4 banks/group, 4 bank groups
[ 1.037567] spdmem0: 0.750ns cycle time
[ 1.037567] spdmem0: tAA-tRCD-tRP-tRAS: 19-19-19-43
[ 1.037567] spdmem1 at iic0 addr 0x51: 9965745-002.A00G
[ 1.037567] spdmem1: DDR4 SDRAM (DDR4 UDIMM), ECC, temp-sensor, 16GB, 2667MHz (PC4-21300)
[ 1.037567] spdmem1: 16 rows, 10 cols, 2 ranks (symmetric), 4 banks/group, 4 bank groups
[ 1.037567] spdmem1: 0.750ns cycle time
[ 1.037567] spdmem1: tAA-tRCD-tRP-tRAS: 19-19-19-43
[ 1.037567] spdmem2 at iic0 addr 0x52: 9965745-002.A00G
[ 1.037567] spdmem2: DDR4 SDRAM (DDR4 UDIMM), ECC, temp-sensor, 16GB, 2667MHz (PC4-21300)
[ 1.037567] spdmem2: 16 rows, 10 cols, 2 ranks (symmetric), 4 banks/group, 4 bank groups
[ 1.037567] spdmem2: 0.750ns cycle time
[ 1.037567] spdmem2: tAA-tRCD-tRP-tRAS: 19-19-19-43
[ 1.037567] spdmem3 at iic0 addr 0x53: 9965745-002.A00G
[ 1.037567] spdmem3: DDR4 SDRAM (DDR4 UDIMM), ECC, temp-sensor, 16GB, 2667MHz (PC4-21300)
[ 1.037567] spdmem3: 16 rows, 10 cols, 2 ranks (symmetric), 4 banks/group, 4 bank groups
[ 1.037567] spdmem3: 0.750ns cycle time
[ 1.037567] spdmem3: tAA-tRCD-tRP-tRAS: 19-19-19-43

ryzen
[ 1.011873] spdmem0 at iic0 addr 0x50: 9ASF2G72AZ-3G2B1
[ 1.011873] spdmem0: DDR4 SDRAM (DDR4 UDIMM), ECC, temp-sensor, 16GB, 3200MHz (PC4-25600)
[ 1.011873] spdmem0: 17 rows, 10 cols, 1 ranks, 4 banks/group, 4 bank groups
[ 1.011873] spdmem0: 0.625ns cycle time
[ 1.011873] spdmem0: tAA-tRCD-tRP-tRAS: 22-22-22-52
[ 1.011873] spdmem1 at iic0 addr 0x51: 9ASF2G72AZ-3G2B1
[ 1.011873] spdmem1: DDR4 SDRAM (DDR4 UDIMM), ECC, temp-sensor, 16GB, 3200MHz (PC4-25600)
[ 1.011873] spdmem1: 17 rows, 10 cols, 1 ranks, 4 banks/group, 4 bank groups
[ 1.011873] spdmem1: 0.625ns cycle time
[ 1.011873] spdmem1: tAA-tRCD-tRP-tRAS: 22-22-22-52

----------------------------------------
FreeBSD:
----------------------------------------

pci0: <memory, RAM> at device 20.2 (no driver attached)

https://dmesgd.nycbug.org/index.cgi?do=view&id=5990:
[drm] vm size is 64 GB, 2 levels, block size is 10-bit, fragment size is 9-bit
amdgpu/tonga_mc.bin: could not load firmware image, error 2
drmn0: fail (0) to get firmware image with name: amdgpu/tonga_mc.bin
drmn0: successfully loaded firmware image with mapped name: amdgpu_tonga_mc_bin
drmn0: VRAM: 8192M 0x000000F400000000 - 0x000000F5FFFFFFFF (8192M used)
drmn0: GTT: 1024M 0x0000000000000000 - 0x000000003FFFFFFF
Failed to add WC MTRR for [0xe0000000-0xefffffff]: -22; performance may suffer
[drm] Detected VRAM RAM=8192M, BAR=256M
[drm] RAM width 256bits GDDR5

FreeBSD-13.0-BETA4/arm64 GENERIC-MMCCAM on raspberrypi rpi 3Bplus

bcm2835_cpufreq0: ARM 600MHz, Core 250MHz, SDRAM 400MHz, Turbo OFF

drmn0: VRAM: 2048M 0x000000F400000000 - 0x000000F47FFFFFFF (2048M used)
drmn0: GART: 1024M 0x0000000000000000 - 0x000000003FFFFFFF
drmn0: AGP: 267419648M 0x000000F800000000 - 0x0000FFFFFFFFFFFF
Successfully added WC MTRR for [0xe0000000-0xefffffff]: 0;
[drm] Detected VRAM RAM=2048M, BAR=256M
[drm] RAM width 64bits DDR4

[drm] vm size is 262144 GB, 4 levels, block size is 9-bit, fragment size is 9-bit
drmn0: VRAM: 2048M 0x000000F400000000 - 0x000000F47FFFFFFF (2048M used)
drmn0: GART: 1024M 0x0000000000000000 - 0x000000003FFFFFFF
drmn0: AGP: 267419648M 0x000000F800000000 - 0x0000FFFFFFFFFFFF
Successfully added WC MTRR for [0xe0000000-0xefffffff]: 0;
[drm] Detected VRAM RAM=2048M, BAR=256M
[drm] RAM width 64bits DDR4

================================================================================
TTY DATA
--------------------------------------------------------------------------------

========================================
What is the TTY major number of your Unix?
----------------------------------------

https://unix.stackexchange.com/questions/127259/what-is-the-tty-major-number-of-your-unix/127260#127260

Unix version 7 (1979):

# ls -l /dev/console /dev/tty?*
crw--w--w- 1 root    0,  0 Sep 22 06:46 /dev/console
crw-rw-r-- 1 root    0,  1 Sep 22 05:47 /dev/tty1
crw-rw-r-- 1 root    0,  2 Sep 22 05:47 /dev/tty2

(no pty there yet)
Linux 3.2.0 (debian wheezy).

Note: you can also find these by searching /dev for owned by group tty and dialout. That's a Debian thing.

    Virtual consoles
        /dev/tty[0-9]*: 4
    Real serial ports:
        /dev/ttyS[0-9]+: 4
    Pseudo terminals:
        /dev/pts/[0-9]+: 136
        /dev/pts/ptmx: 5
    FTDI USB serial port:
        /dev/ttyUSB[0-9]+: 188
    USB serial port: (AVR embedded USB/Arduino Uno)
        /dev/ttyACM[0-9]+: 166

Linux 3.4.0 (Android 4.4.2 / Nexus 5)

Note: has all linux ones plus:

    ttyACM (cell modem control)
        (no /dev entry, apparently): 166
    ttyHSL (Bluetooth)
        /dev/ttyHSL0: 247
    ttyHS (Bluetooth)
        /dev/ttyHS99: 248

Darwin 13.1.0 (MacOS 10.9.2):

    Real serial ports:
        /dev/ttys[0-9a-f]: 4
    Pseudo terminals:
        /dev/ttys[0-9]{3}: 16
    FTDI USB serial port:
        /dev/tty.usbserial.*: 18
    USB serial port: (AVR embedded USB/Arduino Uno)
        /dev/tty.usbmodem.*: 18

Solaris 10 x86/amd64:

    Pseudo terminals:
        /dev/pty[p-r][0-9a-f] (pty master): 25
        /dev/tty[p-r][0-9a-f] (pty slave): 26
        /dev/pts/[0-9]+: 24
        /dev/ptmx: 23

    Serial devices:
        /dev/tty[abc...] aka /dev/term/[abc...] or /dev/tty0[012..] (uart serial, also ): 106
        also as /dev/ttyd[012...] but with different interface (dial, modem) also on 106 but high minors.

OpenBSD 6.0

As documented in the commentary in /dev/MAKEDEV

    PC/AT UART serial ports:
        /dev/tty[0-7][0-9a-f]: 8
        /dev/cua[0-7][0-9a-f]: 8
    Cyclades serial ports:
        /dev/ttyc*: 38
        /dev/cuac*: 38
    Virtio serial ports:
        /dev/ttyVI*: 94
    USB serial ports:
        /dev/ttyU[0-3]: 66
        /dev/cuaU[0-3]: 66
    wscons terminals:
        /dev/tty[C-J][0-b]: 12
    Pseudo terminal master and slave (non-UNIX 98)
        /dev/pty[p-zP-T][0-9a-zA-Z]: 6
        /dev/tty[p-zP-T][0-9a-zA-Z]: 5

FreeBSD 10.0 and TrueOS

FreeBSD (and its derivatives such as TrueOS) is where your idea shows a fatal flaw. There is no major+minor device number scheme in FreeBSD.

The devfs pseudo-filesystem on FreeBSD, conventionally mounted at /dev, does not use a major+minor system for grouping devices into "major" classes at all. Rather, the rdev for the device is the same as its i-node number in the pseudo-filesystem, with i-nodes simply assigned in ascending order as device nodes are generated, depending from the exact hardware on the machine at hand at the time.

So device number cannot be used as a shortcut for isatty().


========================================
What is the difference between ttys0, ttyUSB0 and ttyAMA0 in Linux?
----------------------------------------

https://unix.stackexchange.com/questions/307390/what-is-the-difference-between-ttys0-ttyusb0-and-ttyama0-in-linux/307394

----------------------------------------
ttyS0
----------------------------------------

What you get on the host when you connect to target with this:

[image] [serial adapter cable]

This port is not present on most laptops or small devboards, but is still present on many desktops, and is very convenient for OS developers as mentioned at: https://askubuntu.com/questions/104771/where-are-kernel-panic-logs/932380#932380

You also get it with qemu -device isa-serial.

For example could hook up two desktops with one of those cables, and communicate directly between them to get a shell on the remote desktop from your own. From Linux computer 1 you would run:

screen /dev/ttyS0 115200

and then computer 2 would reply with the login prompt, and then you can log in from computer 1 into computer 2.

So this is a bit like SSH and can be seen as an early form of networking. I think those cables cannot be too long or else the signal is lost though, and you can't do as much without the TCP/IP addressing/packet mechanisms.

----------------------------------------
ttyUSB0
----------------------------------------

What you get on host when using something like:

[image] usb > tty adapter cable

I also get it when I connect the GPIOs of my Raspberry Pi to my laptop to get a shell on a Raspberry Pi without a screen!

[image] usb laptop to raspi gpio

And another more integrated RPI connector version of the above:

[image] usb gpio direct connector

A concrete RPI example at: https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545

----------------------------------------
ttyAMA0
----------------------------------------

An ARM thing as mentioned by Sato.

Haven't run into that for real hardware, will post pics when I do. I think I would be able to connect my desktop with a serial port to my RPI with that interface: https://raspberrypi.stackexchange.com/questions/69697/what-is-dev-ttyama0

But I've used it with QEMU: https://github.com/buildroot/buildroot/tree/27d7ef126bc7f4eb1a757128466befa11245bbfd/board/qemu/arm-versatile

It seem that AMA is a shortened form of AMBA? https://www.raspberrypi.org/forums/viewtopic.php?t=8075 But why would they shorten a 4 character acronym?!

The only interesting Linux kernel hits are under: https://github.com/torvalds/linux/blob/v4.16/drivers/tty/serial/amba-pl011.c#L2488 so it seems to be strictly linked to the PL011: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0183g/index.html which is a UART controller licensed by ARM, which I think is the dominating implementation.

[note: this is what raspberry pi uses for bluetooth on at least pi 4, maybe pi 3 too.]

----------------------------------------
ttySAC0
----------------------------------------

Kamil reported that his Samsung Artik 710, so another one for the collection.

================================================================================
SECONDARY DATA
================================================================================

================================================================================
LIVE CD LOGINS
--------------------------------------------------------------------------------

archex:
un: exton
pw: live

mint:
un: mint
pw: <empty>

peppermint: os boxes
un: osboxes
pw: osboxes.org
root pw: osboxes.org

trisquel
un: trisquel
pw: <empty>

zorin:
OLD:
un: live
pw: <empty>
NEW:
un: zorin
pw: none required, it logs in

smartos:
un: root
pw: root
linux-solaris cheat sheet: https://wiki.smartos.org/display/DOC/The+Linux-to-SmartOS+Cheat+Sheet

================================================================================
DISTRO DATA
--------------------------------------------------------------------------------

========================================
Packages
----------------------------------------

You have to use:

PGK_SRC=http://nycdn.netbsd.org/pub/pkgsrc/packages/NetBSD/amd64/7.2/All

to get binaries, but netbsd lags significantly behind its release versions unfortunately so check:

http://nycdn.netbsd.org/pub/pkgsrc/packages/NetBSD/amd64/

to see which the latest version that supports binary packages is.


================================================================================
DATA ANALYSIS
================================================================================

========================================
FIND FILE IN *.tar.gz
----------------------------------------

find ./ -iname "*.tar.gz" -exec bash -c 'result=$(set -o pipefail ; echo "{}" ; tar -tf {} | grep -i "system-cmd-sensors-absent" | sed "s/^/    /") ; test $? -eq 0 && printf "$result\n"' \;

========================================
get rid of arrays/hashes passed whole instead of by reference to subs
----------------------------------------

# find the subs:

grep -En '[a-z]\([^(]*@[^)]+\)' pinxi | grep -Ev '(#|log_data\(|scalar[\( ]|sort\(|\\@|chomp|if )'

grep -En '[a-z]\([^(]*@[^)]+\)' pinxi | grep -Ev '(^[[:space:]]*#|log_data\(|scalar[\( ]|sort\(|\\@|chomp)'

grep -En '[a-z]\([^(]*%[^)]+\)' pinxi | grep -Ev '(#|sprint|log_data\(|scalar[\( ]|sort {|sort\(|\\%|chomp|if )'


